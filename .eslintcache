<<<<<<< HEAD
[{"/Users/vishankrughwani/Desktop/UW/Fall_2020/INFO_340/project-2-vishankrug/src/index.js":"1","/Users/vishankrughwani/Desktop/UW/Fall_2020/INFO_340/project-2-vishankrug/src/App.js":"2","/Users/vishankrughwani/Desktop/UW/Fall_2020/INFO_340/project-2-vishankrug/src/components/Events.js":"3","/Users/vishankrughwani/Desktop/UW/Fall_2020/INFO_340/project-2-vishankrug/src/components/People.js":"4","/Users/vishankrughwani/Desktop/UW/Fall_2020/INFO_340/project-2-vishankrug/src/components/SubmissionPages.js":"5","/Users/vishankrughwani/Desktop/UW/Fall_2020/INFO_340/project-2-vishankrug/src/components/Navigation.js":"6","/Users/vishankrughwani/Desktop/UW/Fall_2020/INFO_340/project-2-vishankrug/src/components/LandingPage.js":"7","/Users/vishankrughwani/Desktop/UW/Fall_2020/INFO_340/project-2-vishankrug/src/components/Search.js":"8","/Users/vishankrughwani/Desktop/UW/Fall_2020/INFO_340/project-2-vishankrug/src/components/Buttons.js":"9","/Users/vishankrughwani/Desktop/UW/Fall_2020/INFO_340/project-2-vishankrug/src/components/Forms.js":"10"},{"size":988,"mtime":1608153756360,"results":"11","hashOfConfig":"12"},{"size":3652,"mtime":1608170820709,"results":"13","hashOfConfig":"12"},{"size":6006,"mtime":1608171085000,"results":"14","hashOfConfig":"12"},{"size":5314,"mtime":1608170660640,"results":"15","hashOfConfig":"12"},{"size":553,"mtime":1608170710189,"results":"16","hashOfConfig":"12"},{"size":1962,"mtime":1608170710188,"results":"17","hashOfConfig":"12"},{"size":1004,"mtime":1608170710187,"results":"18","hashOfConfig":"12"},{"size":1122,"mtime":1607996276345,"results":"19","hashOfConfig":"12"},{"size":1976,"mtime":1608170710185,"results":"20","hashOfConfig":"12"},{"size":6768,"mtime":1608170710192,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"c7jwox",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},"/Users/vishankrughwani/Desktop/UW/Fall_2020/INFO_340/project-2-vishankrug/src/index.js",[],["47","48"],"/Users/vishankrughwani/Desktop/UW/Fall_2020/INFO_340/project-2-vishankrug/src/App.js",["49"],"import React, {useState, useEffect} from 'react';\nimport './CSS/App.css';\nimport {NavBar, Footer} from './components/Navigation.js'\nimport {EventsIndividualPage, EventsMainPage} from './components/Events.js'\nimport { Route, Switch, Redirect} from 'react-router-dom';\nimport {PeopleList, PeopleDetails} from './components/People.js'\nimport firebase from 'firebase';\nimport { LandingPage } from './components/LandingPage.js';\nimport {EventSubmission, EditProfile} from './components/SubmissionPages.js';\n\n\nconst uiConfig = {\n  signInOptions: [\n    {\n      provider: firebase.auth.EmailAuthProvider.PROVIDER_ID,\n      requireDisplayName: true\n    },\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID\n  ],\n  credentialHelper: 'none',\n  signInFlow: 'popup',\n  callbacks: {\n    signInSuccessWithAuthResult: () => false,\n  },\n\n};\n\nfunction App(props) {\n\n  const events = props.events;\n  const people = props.people;\n\n\n  // Firebase state\n\n  const[user, setUser] = useState(undefined);\n  const [isLoading, setIsLoading] = useState(true);\n \n  //auth state event listener\n  useEffect( () => { //run after component loads\n    //listen to the the authentication state\n    const authUnregisterFunction = firebase.auth().onAuthStateChanged((firebaseUser) =>{\n      if(firebaseUser){\n        setUser(firebaseUser)\n        setIsLoading(false);\n        /*\n        let fnameUpdate = user.displayName.substr(0, user.displayName.indexOf(' '));\n        let lnameUpdate = user.displayName.substr(user.displayName.indexOf(' ')+1, user.displayName.length);\n        const newPerson = {\n          fname: fnameUpdate,\n          lname: lnameUpdate,\n          major: \"-\",\n          interest: \"-\",\n          year: \"-\",\n          email: user.email,\n          bio: \"-\"\n        }\n        firebase.database().ref('people').push(newPerson);\n        */\n      }else{ //not defined, logged out\n        setUser(null)\n      }\n    })\n\n    return function cleanup() {\n      authUnregisterFunction();\n    }\n  }, []) //only run hook on first load\n\n  /*if(isLoading){\n    return(\n    <div className=\"text-center\">\n      <i className=\"fa fa-spinner fa-spin fa-3x\"></i>\n    </div>\n    ) \n  }*/\n\n  \n  let content = null;\n\n  //Log in page\n  if(!user){\n    content = (\n      <LandingPage uiConfig={uiConfig} />\n      \n    )\n\n  // Home page + rest of page\n  }else{\n    content =(\n      <div>\n        <nav>\n          <NavBar />\n        </nav>\n\n        <main>\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/people\" render={(routerProps) => (\n              <PeopleList {...routerProps} user={user} people={people}></PeopleList>\n              )} />\n\n              <Route exact path=\"/\" render={(routerProps) => (\n              <EventsMainPage {...routerProps}  ></EventsMainPage>\n            )} />\n\n              <Route path=\"/submit-event\" render={() => (\n              <EventSubmission />\n              )}/>\n\n              <Route path=\"/event/:eventName\" render={(routerProps) => (\n              <EventsIndividualPage {...routerProps} events={events}></EventsIndividualPage>\n              )}/>\n\n              <Route path=\"/people-edit\" render={() => (\n              <EditProfile user={user} people={people}></EditProfile>\n              )}/>\n\n              <Route path=\"/people/:fullname\" render={(routerProps) => (\n              <PeopleDetails {...routerProps} people={people}></PeopleDetails>\n              )}/>\n              \n              <Redirect to=\"/\" />\n            </Switch>\n          </div>\n          \n        </main>\n\n        <footer>\n          <Footer />\n        </footer>\n\n    </div>\n \n\n    )\n  }\n  return (\n   content\n  );\n}\n\nexport default App;\n","/Users/vishankrughwani/Desktop/UW/Fall_2020/INFO_340/project-2-vishankrug/src/components/Events.js",["50"],"/Users/vishankrughwani/Desktop/UW/Fall_2020/INFO_340/project-2-vishankrug/src/components/People.js",["51","52","53","54"],"import React, {useEffect, useState} from 'react';\nimport {Card, CardText, CardBody,CardLink, CardTitle, Col, Row} from 'reactstrap';\nimport { Redirect } from 'react-router-dom';\nimport _ from 'lodash';\nimport { useParams } from \"react-router-dom\";\nimport {BackButton} from './Buttons.js';\nimport firebase from 'firebase';\nimport 'firebase/database';\nimport { SearchBarPage } from './Search.js';\nimport 'firebase/auth';\n\n\n\n\nexport function PeopleList(props){\n  let people = props.people;\n  //search states\n  const [nameState, setNameSearch] = useState('');\n  const [majorState, setMajorSearch] = useState('');\n  const [interestsState, setInterestsSearch] = useState('');\n  const [peopleArray, setPeople] = useState([]);\n  const [peopleEmails, setEmails] = useState([])\n\n  useEffect(() => {\n    const peopleRef = firebase.database().ref(\"people\");\n    peopleRef.on(\"value\", (snapshot) => {\n      const peopleObjects = snapshot.val();\n      let peopleKeyArray = Object.keys(peopleObjects);\n      let peopleArray = peopleKeyArray.map((key) => {\n        let singlePeopleObject = peopleObjects[key];\n        singlePeopleObject.key = key;\n        \n        return singlePeopleObject;\n      })\n      let peopleEmails = peopleArray.map((key) => {\n        return key.email;\n      })\n      setPeople(peopleArray);\n      setEmails(peopleEmails);\n    })\n  }, [])\n\n  //filter the results by search\n  let filteredPeople = peopleArray.filter((person) => {\n    return (person.fname.toLowerCase().indexOf(nameState.toLowerCase()) !== -1 || person.lname.toLowerCase().indexOf(nameState.toLowerCase())!== -1) || ((person.fname.toLowerCase()+ \" \" + person.lname.toLowerCase()).indexOf(nameState.toLowerCase()) !== -1);\n  });\n\n  if(majorState !== ''){\n    filteredPeople = filteredPeople.filter((person) => {\n      return (person.major.toLowerCase().indexOf(majorState.toLowerCase()) !== -1);\n    });\n  }\n\n  if(interestsState !== ''){\n    filteredPeople = filteredPeople.filter((person) => {\n      return (person.interests.toLowerCase().indexOf(interestsState.toLowerCase()) !== -1);\n    });\n  }\n\n  //setStates\n\n  const updateNameSearch = (person) => {\n    setNameSearch(person.target.value);\n  }\n\n  const updateMajorSearch = (person) => {\n    setMajorSearch(person.target.value);\n  }\n\n  const updateInterestsSearch = (person) => {\n    setInterestsSearch(person.target.value);\n  } \n\n  const clearPeople = () => {\n    setNameSearch('');\n    setInterestsSearch('');\n    setMajorSearch('');\n  }\n\n    let peopleCards = filteredPeople.map((individual) => {\n    return <PeopleCard key={individual.email} people={individual} />\n  })\n\n  //grabbing text before and after space\n  let fnameUpdate = props.user.displayName.substr(0, props.user.displayName.indexOf(' '));\n  let lnameUpdate = props.user.displayName.substr(props.user.displayName.indexOf(' ')+1, props.user.displayName.length);\n\n\n/*\n  if(peopleEmails.indexOf(props.user.email) == -1) {\n    const newPerson = {\n      fname: fnameUpdate,\n      lname: lnameUpdate,\n      major: \"-\",\n      interest: \"-\",\n      year: \"-\",\n      email: props.user.email,\n      bio: \"-\",\n      image: \"-\"\n    }\n    firebase.database().ref('people').push(newPerson);\n  }\n*/\n  return(\n    <div>\n      <div className=\"search-bar\">\n        <SearchBarPage updateNameSearch={updateNameSearch} nameState={nameState} updateMajorSearch={updateMajorSearch} majorState={majorState} interestsState={interestsState} updateInterestsSearch={updateInterestsSearch} clearPeople={clearPeople} ></SearchBarPage>\n      </div>\n    <Row>\n      {peopleCards}\n    </Row>\n    </div>\n  )\n}\n\nexport function PeopleCard(props) {\n  \n    const [redirectTo, setRedirectTo] = useState(undefined);\n\n    let people = props.people;\n\n    const handleClick = () => {\n      setRedirectTo(\"/people/\"+people.fname);\n    }\n\n    if(redirectTo !== undefined){\n      return <Redirect push to={redirectTo} />\n    }\n\n    return (\n      <Col  className=\"mt-4 col-sm-4\" onClick={handleClick}>\n        <Card className=\"clickable\">\n          <div className= \"mx-auto\">\n            <img className=\"rounded-circle people_image\" src={people.image}  alt={\"an image for \" + people.fname + \" \" + people.lname}/>\n          </div>\n          <CardBody className=\"card-body\">\n            <CardTitle tag=\"h3\" className=\"name text-center\">{people.fname + \" \" + people.lname}</CardTitle>\n            <CardText className=\"card-info\">{\"Major: \" + people.major}</CardText>\n            <CardText className=\"card-info\">{\"Interests: \" + people.interest}</CardText>\n            <CardLink>Click to learn more!</CardLink>\n          </CardBody>\n        </Card>\n  \n      </Col>\n    )\n  }\n\n  export function PeopleDetails(props){\n    let fullname = useParams().fullname;\n    let person =  _.find(props.people, {fname:fullname});\n\n    return(\n      <div>\n        <img className=\"people_image\" src={\"../\"+person.image}  alt={\"an image for \" + person.fname + \" \"+ person.lname}/>\n        <h2>{person.fname + \" \" + person.lname}</h2>\n        <p><strong>Major: </strong>{person.major}</p>\n        <p><strong>Interests: </strong>{person.interests}</p>\n        <p><strong>Class Standing: </strong>{person.year}</p>\n        <p><strong>Email: </strong>{person.email}</p>\n        <p><strong>Bio: </strong>{person.bio}</p>\n        <BackButton page=\"/people\" />\n        \n      </div>\n    )\n  }\n\n","/Users/vishankrughwani/Desktop/UW/Fall_2020/INFO_340/project-2-vishankrug/src/components/SubmissionPages.js",[],"/Users/vishankrughwani/Desktop/UW/Fall_2020/INFO_340/project-2-vishankrug/src/components/Navigation.js",[],"/Users/vishankrughwani/Desktop/UW/Fall_2020/INFO_340/project-2-vishankrug/src/components/LandingPage.js",[],"/Users/vishankrughwani/Desktop/UW/Fall_2020/INFO_340/project-2-vishankrug/src/components/Search.js",[],"/Users/vishankrughwani/Desktop/UW/Fall_2020/INFO_340/project-2-vishankrug/src/components/Buttons.js",[],"/Users/vishankrughwani/Desktop/UW/Fall_2020/INFO_340/project-2-vishankrug/src/components/Forms.js",["55","56","57","58","59"],"import React, {useState, useEffect} from 'react';\nimport {Formik, Form, Field} from 'formik';\nimport firebase from 'firebase';\n\nimport 'firebase/database';\nimport 'firebase/auth';\nimport {Button} from 'reactstrap';\nimport {BackButton} from './Buttons'\nimport { faLeaf } from '@fortawesome/free-solid-svg-icons';\n//import { DatePicker } from 'react-datepicker';\n//import FileUploader from 'react-firebase-file-uploader';\n\n\n\nexport function EventsSubmissionForm(){\n  \n  /* A huge thank you to Tallan Groberg, Code from https://dev.to/itnext/how-to-do-image-upload-with-firebase-in-react-cpj */\n\n  const allInputs = {imgUrl: \"\"};\n  const [imageAsUrl, setImageAsUrl] = useState(allInputs);\n  const [imageAsFile, setImageAsFile] = useState('');\n\n  const initialValues = {\n    titlea: '', \n    hostedBy: '', \n    time:'',\n    date: '', \n    location: '', \n    description: '', \n    image: '',\n    isInterest: '',\n  }\n\n  const handleImageAsFile = (event) => {\n    const img = event.target.files[0];\n    setImageAsFile((img))\n    \n  }\n\n  const onSubmit = (values) =>{\n    let databaseRef = firebase.database().ref('events');\n    let uploadTask = firebase.storage().ref(`/image/${imageAsFile.name}`).put(imageAsFile);\n   \n\n    databaseRef.push(\n      {\n        title: values.title,\n        hostedBy: values.hostedBy,\n        time: values.time,\n        date: values.date,\n        location: values.location,\n        description: values.description,\n        image: imageAsFile.name,\n        isInterested: false,\n        \n      }\n    );\n\n    uploadTask.on(\"state_change\",\n    (snapshot) => {\n      console.log(snapshot)\n    }, (err) => {\n      console.log(err)\n    }, () => {\n      firebase.storage().ref(\"images\").child(imageAsFile.name).getDownloadURL().then(fireBaseUrl => {\n        setImageAsUrl(prevObject => ({...prevObject, imgUrl: fireBaseUrl}))\n      })\n    })\n\n  }\n\n\n  return(\n    <Formik {...{initialValues, onSubmit}}>\n      {() => (\n        <Form className=\"baseForm\" noValidate>\n          \n          <label className=\"mt-4\">Title of event</label> <br></br>\n          <Field \n            type=\"text\"\n            id=\"title\"\n            name=\"title\"\n            /> <br></br>\n\n          <label className=\"mt-4\">Hosted by</label> <br></br>\n          <Field \n            type=\"text\"\n            id=\"hostedBy\"\n            name=\"hostedBy\"\n            /> <br></br>\n\n          <label className=\"mt-4\">Date</label> <br></br>\n          <Field\n            type=\"date\"\n            id=\"date\"\n            name=\"date\"\n            /> <br></br>\n\n          <label className=\"mt-4\">Time</label> <br></br>\n          <Field \n            type=\"time\"\n            id=\"time\"\n            name=\"time\"\n            /> <br></br>\n\n          <label className=\"mt-4\">Location</label> <br></br>\n          <Field \n            type=\"text\"\n            id=\"location\"\n            name=\"location\"\n            /> <br></br>\n\n          <label className=\"mt-4\">Description</label> <br></br>\n          <Field \n            type=\"textarea\"\n            id=\"description\"\n            name=\"description\"\n            /> <br></br>\n\n          <label className=\"mt-4\">Upload an image</label> <br></br>\n          <input type=\"file\" id=\"image\" name=\"image\" onChange={handleImageAsFile}/><br></br>\n         \n          \n          <Button type=\"submit\" className=\"mt-5\">Submit</Button>\n\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\n\nexport function PeopleForm(){\n  let user = firebase.auth().currentUser;\n  //let peopleRef = firebase.database.ref(\"people\");\n\n  const [peopleArray, setPeople] = useState([]);\n\n  useEffect(() => {\n    const peopleRef = firebase.database().ref(\"people\");\n    peopleRef.on(\"value\", (snapshot) => {\n      const peopleObjects = snapshot.val();\n      let peopleKeyArray = Object.keys(peopleObjects);\n      let peopleArray = peopleKeyArray.map((key) => {\n        let singlePeopleObject = peopleObjects[key];\n        singlePeopleObject.key = key;\n        \n        return singlePeopleObject;\n      })\n      setPeople(peopleArray);\n    })\n  }, [])\n\n  let keyOfCurrentUser;\n\n  for(let i = 0; i < peopleArray.length; i++) {\n    if(peopleArray[i].email == user.email){\n      keyOfCurrentUser = peopleArray[i].key;\n    }\n  }\n\n  let fnameUpdate = user.displayName.substr(0, user.displayName.indexOf(' '));\n  let lnameUpdate = user.displayName.substr(user.displayName.indexOf(' ')+1, user.displayName.length);\n\n  const initialValues = {\n    fname: fnameUpdate, \n    lname: lnameUpdate,\n    major: user.major,\n    interest: user.interest,\n    year: user.year,\n    email: user.email,\n    bio: user.bio,\n    image: user.image\n  }\n\n  const onSubmit = (values) => {\n\n    const updatePerson = {\n        fname: fnameUpdate,\n        lname: lnameUpdate,\n        major: values.major,\n        interest: values.interest,\n        year: values.year,\n        email: user.email,\n        bio: values.bio,\n        image: imageAsFile.name\n      \n    }\n    firebase.database().ref('people/'+keyOfCurrentUser).update(updatePerson);\n  }  \n\n  const allInputs = {imgUrl: \"\"};\n  const [imageAsUrl, setImageAsUrl] = useState(allInputs);\n  const [imageAsFile, setImageAsFile] = useState('');\n\n  const handleImageAsFile = (event) => {\n    const img = event.target.files[0];\n    setImageAsFile((img))\n    \n  }\n\n\n  return(\n    <Formik {...{initialValues, onSubmit}}>\n    {() => (\n      <Form className=\"baseForm\" noValidate>\n\n      <label className=\"mt-4\">First Name</label> <br></br>\n        <Field \n          type=\"text\"\n          id=\"fname\"\n          name=\"fname\"\n          /> <br></br>\n\n      <label className=\"mt-4\">Last Name</label> <br></br>\n        <Field \n          type=\"text\"\n          id=\"lname\"\n          name=\"lname\"\n          /> <br></br>\n\n        <label className=\"mt-4\">Major</label> <br></br>\n        <Field \n          type=\"text\"\n          id=\"major\"\n          name=\"major\"\n          /> <br></br>\n\n        <label className=\"mt-4\">Class Standing</label> <br></br>\n        <Field\n          type=\"text\"\n          id=\"year\"\n          name=\"year\"\n          /> <br></br>\n\n        <label className=\"mt-4\">Interest</label> <br></br>\n        <Field \n          type=\"text\"\n          id=\"interest\"\n          name=\"interest\"\n          /> <br></br>\n\n        <label className=\"mt-4\">Email</label> <br></br>\n        <Field \n          type=\"text\"\n          id=\"email\"\n          name=\"email\"\n          /> <br></br>\n\n        <label className=\"mt-4\">Bio</label> <br></br>\n        <Field \n          type=\"text\"\n          id=\"bio\"\n          name=\"bio\"\n          /> <br></br>\n\n\n        <label className=\"mt-4\">Upload an image</label> <br></br>\n          <input type=\"file\" id=\"image\" name=\"image\" onChange={handleImageAsFile}/><br></br>\n\n        <Button type=\"submit\">Submit</Button>\n        <BackButton/>\n      </Form>\n    )}\n  </Formik>\n  )\n}",["60","61"],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":37,"column":10,"nodeType":"68","messageId":"69","endLine":37,"endColumn":19},{"ruleId":"66","severity":1,"message":"70","line":12,"column":7,"nodeType":"68","messageId":"69","endLine":12,"endColumn":25},{"ruleId":"66","severity":1,"message":"71","line":16,"column":7,"nodeType":"68","messageId":"69","endLine":16,"endColumn":13},{"ruleId":"66","severity":1,"message":"72","line":22,"column":10,"nodeType":"68","messageId":"69","endLine":22,"endColumn":22},{"ruleId":"66","severity":1,"message":"73","line":85,"column":7,"nodeType":"68","messageId":"69","endLine":85,"endColumn":18},{"ruleId":"66","severity":1,"message":"74","line":86,"column":7,"nodeType":"68","messageId":"69","endLine":86,"endColumn":18},{"ruleId":"66","severity":1,"message":"75","line":9,"column":10,"nodeType":"68","messageId":"69","endLine":9,"endColumn":16},{"ruleId":"66","severity":1,"message":"76","line":20,"column":10,"nodeType":"68","messageId":"69","endLine":20,"endColumn":20},{"ruleId":"77","severity":1,"message":"78","line":157,"column":29,"nodeType":"79","messageId":"80","endLine":157,"endColumn":31},{"ruleId":"66","severity":1,"message":"76","line":193,"column":10,"nodeType":"68","messageId":"69","endLine":193,"endColumn":20},{"ruleId":"66","severity":1,"message":"81","line":193,"column":22,"nodeType":"68","messageId":"69","endLine":193,"endColumn":35},{"ruleId":"62","replacedBy":"82"},{"ruleId":"64","replacedBy":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'isLoading' is assigned a value but never used.","Identifier","unusedVar","'interestedCallback' is assigned a value but never used.","'people' is assigned a value but never used.","'peopleEmails' is assigned a value but never used.","'fnameUpdate' is assigned a value but never used.","'lnameUpdate' is assigned a value but never used.","'faLeaf' is defined but never used.","'imageAsUrl' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setImageAsUrl' is assigned a value but never used.",["84"],["85"],"no-global-assign","no-unsafe-negation"]
=======
[{"D:\\web-dev\\project-2-vishankrug\\src\\index.js":"1","D:\\web-dev\\project-2-vishankrug\\src\\App.js":"2","D:\\web-dev\\project-2-vishankrug\\src\\components\\Search.js":"3","D:\\web-dev\\project-2-vishankrug\\src\\components\\Buttons.js":"4","D:\\web-dev\\project-2-vishankrug\\src\\components\\Navigation.js":"5","D:\\web-dev\\project-2-vishankrug\\src\\components\\People.js":"6","D:\\web-dev\\project-2-vishankrug\\src\\components\\Events.js":"7","D:\\web-dev\\project-2-vishankrug\\src\\components\\LandingPage.js":"8","D:\\web-dev\\project-2-vishankrug\\src\\components\\SubmissionPages.js":"9","D:\\web-dev\\project-2-vishankrug\\src\\components\\Forms.js":"10"},{"size":1027,"mtime":1608168856523,"results":"11","hashOfConfig":"12"},{"size":3799,"mtime":1608170772140,"results":"13","hashOfConfig":"12"},{"size":1151,"mtime":1607986290837,"results":"14","hashOfConfig":"12"},{"size":2071,"mtime":1608166187028,"results":"15","hashOfConfig":"12"},{"size":2035,"mtime":1608166072325,"results":"16","hashOfConfig":"12"},{"size":5480,"mtime":1608170514319,"results":"17","hashOfConfig":"12"},{"size":6612,"mtime":1608170699373,"results":"18","hashOfConfig":"12"},{"size":1050,"mtime":1608166288581,"results":"19","hashOfConfig":"12"},{"size":586,"mtime":1608170514334,"results":"20","hashOfConfig":"12"},{"size":6492,"mtime":1608170514340,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1ln2idt",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},"D:\\web-dev\\project-2-vishankrug\\src\\index.js",[],["47","48"],"D:\\web-dev\\project-2-vishankrug\\src\\App.js",["49"],"import React, {useState, useEffect} from 'react';\r\nimport './CSS/App.css';\r\nimport {NavBar, Footer} from './components/Navigation.js'\r\nimport {EventsIndividualPage, EventsMainPage} from './components/Events.js'\r\nimport { Route, Switch, Redirect} from 'react-router-dom';\r\nimport {PeopleList, PeopleDetails} from './components/People.js'\r\nimport firebase from 'firebase';\r\nimport { LandingPage } from './components/LandingPage.js';\r\nimport {EventSubmission, EditProfile} from './components/SubmissionPages.js';\r\n\r\n\r\nconst uiConfig = {\r\n  signInOptions: [\r\n    {\r\n      provider: firebase.auth.EmailAuthProvider.PROVIDER_ID,\r\n      requireDisplayName: true\r\n    },\r\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID\r\n  ],\r\n  credentialHelper: 'none',\r\n  signInFlow: 'popup',\r\n  callbacks: {\r\n    signInSuccessWithAuthResult: () => false,\r\n  },\r\n\r\n};\r\n\r\nfunction App(props) {\r\n\r\n  const events = props.events;\r\n  const people = props.people;\r\n\r\n\r\n  // Firebase state\r\n\r\n  const[user, setUser] = useState(undefined);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n \r\n  \r\n  //auth state event listener\r\n  useEffect( () => { //run after component loads\r\n    //listen to the the authentication state\r\n    const authUnregisterFunction = firebase.auth().onAuthStateChanged((firebaseUser) =>{\r\n      if(firebaseUser){\r\n        setUser(firebaseUser)\r\n        setIsLoading(false);\r\n        /*\r\n        let fnameUpdate = user.displayName.substr(0, user.displayName.indexOf(' '));\r\n        let lnameUpdate = user.displayName.substr(user.displayName.indexOf(' ')+1, user.displayName.length);\r\n        const newPerson = {\r\n          fname: fnameUpdate,\r\n          lname: lnameUpdate,\r\n          major: \"-\",\r\n          interest: \"-\",\r\n          year: \"-\",\r\n          email: user.email,\r\n          bio: \"-\"\r\n        }\r\n        firebase.database().ref('people').push(newPerson);\r\n        */\r\n      }else{ //not defined, logged out\r\n        setUser(null)\r\n      }\r\n    })\r\n\r\n    return function cleanup() {\r\n      authUnregisterFunction();\r\n    }\r\n  }, []) //only run hook on first load\r\n\r\n  /*if(isLoading){\r\n    return(\r\n    <div className=\"text-center\">\r\n      <i className=\"fa fa-spinner fa-spin fa-3x\"></i>\r\n    </div>\r\n    ) \r\n  }*/\r\n\r\n  \r\n  let content = null;\r\n\r\n  //Log in page\r\n  if(!user){\r\n    content = (\r\n      <LandingPage uiConfig={uiConfig} />\r\n      \r\n    )\r\n\r\n  // Home page + rest of page\r\n  }else{\r\n    content =(\r\n      <div>\r\n        <nav>\r\n          <NavBar />\r\n        </nav>\r\n\r\n        <main>\r\n          <div className=\"container\">\r\n            <Switch>\r\n              <Route exact path=\"/people\" render={(routerProps) => (\r\n              <PeopleList {...routerProps} user={user} people={people}></PeopleList>\r\n              )} />\r\n\r\n              <Route exact path=\"/\" render={(routerProps) => (\r\n              <EventsMainPage {...routerProps}  ></EventsMainPage>\r\n            )} />\r\n\r\n              <Route path=\"/submit-event\" render={() => (\r\n              <EventSubmission />\r\n              )}/>\r\n\r\n              <Route path=\"/event/:eventName\" render={(routerProps) => (\r\n              <EventsIndividualPage {...routerProps} events={events}></EventsIndividualPage>\r\n              )}/>\r\n\r\n              <Route path=\"/people-edit\" render={() => (\r\n              <EditProfile user={user} people={people}></EditProfile>\r\n              )}/>\r\n\r\n              <Route path=\"/people/:fullname\" render={(routerProps) => (\r\n              <PeopleDetails {...routerProps} people={people}></PeopleDetails>\r\n              )}/>\r\n              \r\n              <Redirect to=\"/\" />\r\n            </Switch>\r\n          </div>\r\n          \r\n        </main>\r\n\r\n        <footer>\r\n          <Footer />\r\n        </footer>\r\n\r\n    </div>\r\n \r\n\r\n    )\r\n  }\r\n  return (\r\n   content\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\web-dev\\project-2-vishankrug\\src\\components\\Search.js",[],"D:\\web-dev\\project-2-vishankrug\\src\\components\\Buttons.js",[],"D:\\web-dev\\project-2-vishankrug\\src\\components\\Navigation.js",[],"D:\\web-dev\\project-2-vishankrug\\src\\components\\People.js",["50","51"],"import React from 'react';\r\nimport {Card, CardText, CardBody,CardLink, CardTitle, Col, Row} from 'reactstrap';\r\nimport { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport _ from 'lodash';\r\nimport { useParams } from \"react-router-dom\";\r\nimport {BackButton} from './Buttons.js';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport { SearchBarPage } from './Search.js';\r\n\r\n\r\n\r\n\r\nexport function PeopleList(props){\r\n    let people = props.people;\r\n  //search states\r\n  const [nameState, setNameSearch] = useState('');\r\n  const [majorState, setMajorSearch] = useState('');\r\n  const [interestsState, setInterestsSearch] = useState('');\r\n\r\n\r\n  //filter the results by search\r\n  let filteredPeople = people.filter((person) => {\r\n    return (person.fname.toLowerCase().indexOf(nameState.toLowerCase()) !== -1 || person.lname.toLowerCase().indexOf(nameState.toLowerCase())!== -1) || ((person.fname.toLowerCase()+ \" \" + person.lname.toLowerCase()).indexOf(nameState.toLowerCase()) !== -1);\r\n  });\r\n\r\n  if(majorState !== ''){\r\n    filteredPeople = filteredPeople.filter((person) => {\r\n      return (person.major.toLowerCase().indexOf(majorState.toLowerCase()) !== -1);\r\n    });\r\n  }\r\n\r\n  if(interestsState !== ''){\r\n    filteredPeople = filteredPeople.filter((person) => {\r\n      return (person.interests.toLowerCase().indexOf(interestsState.toLowerCase()) !== -1);\r\n    });\r\n  }\r\n\r\n  //setStates\r\n\r\n  const updateNameSearch = (person) => {\r\n    setNameSearch(person.target.value);\r\n  }\r\n\r\n  const updateMajorSearch = (person) => {\r\n    setMajorSearch(person.target.value);\r\n  }\r\n\r\n  const updateInterestsSearch = (person) => {\r\n    setInterestsSearch(person.target.value);\r\n  } \r\n\r\n  const clearPeople = () => {\r\n    setNameSearch('');\r\n    setInterestsSearch('');\r\n    setMajorSearch('');\r\n  }\r\n\r\n    let peopleCards = filteredPeople.map((individual) => {\r\n    return <PeopleCard key={individual.email} people={individual} />\r\n  })\r\n\r\n  \r\n  const postUser = (event) => {\r\n    //event.preventDefault();\r\n\r\n    const newPerson = {\r\n      name: props.user.displayName,\r\n      major: \"-\",\r\n      interest: \"-\",\r\n      year: \"-\",\r\n      email: props.user.email,\r\n      bio: \"-\"\r\n    }\r\n\r\n    const peopleRef = firebase.database().ref('people')\r\n\r\n\r\n  }\r\n\r\n  postUser(props.user);\r\n\r\n  return(\r\n    <div>\r\n      <div className=\"search-bar\">\r\n        <SearchBarPage updateNameSearch={updateNameSearch} nameState={nameState} updateMajorSearch={updateMajorSearch} majorState={majorState} interestsState={interestsState} updateInterestsSearch={updateInterestsSearch} clearPeople={clearPeople} ></SearchBarPage>\r\n      </div>\r\n    <Row>\r\n      {peopleCards}\r\n    </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function PeopleCard(props) {\r\n  \r\n    const [redirectTo, setRedirectTo] = useState(undefined);\r\n\r\n    let people = props.people;\r\n\r\n    const handleClick = () => {\r\n      setRedirectTo(\"/people/\"+people.fname);\r\n    }\r\n\r\n    if(redirectTo !== undefined){\r\n      return <Redirect push to={redirectTo} />\r\n    }\r\n\r\n    return (\r\n      <Col  className=\"mt-4 col-sm-4\" onClick={handleClick}>\r\n        <Card className=\"clickable\">\r\n          <div className= \"mx-auto\">\r\n            <img className=\"rounded-circle people_image\" src={people.image}  alt={\"an image for \" + people.fname + \" \" + people.lname}/>\r\n          </div>\r\n          <CardBody className=\"card-body\">\r\n            <CardTitle tag=\"h3\" className=\"name text-center\">{people.fname + \" \" + people.lname}</CardTitle>\r\n            <CardText className=\"card-info\">{\"Major: \" + people.major}</CardText>\r\n            <CardText className=\"card-info\">{\"Interests: \" + people.interests}</CardText>\r\n            <CardLink>Click to learn more!</CardLink>\r\n          </CardBody>\r\n        </Card>\r\n  \r\n      </Col>\r\n    )\r\n  }\r\n\r\n  export function PeopleDetails(props){\r\n    let fullname = useParams().fullname;\r\n    let person =  _.find(props.people, {fname:fullname});\r\n\r\n    return(\r\n      <div>\r\n        <img className=\"people_image\" src={\"../\"+person.image}  alt={\"an image for \" + person.fname + \" \"+ person.lname}/>\r\n        <h2>{person.fname + \" \" + person.lname}</h2>\r\n        <p><strong>Major: </strong>{person.major}</p>\r\n        <p><strong>Interests: </strong>{person.interests}</p>\r\n        <p><strong>Class Standing: </strong>{person.year}</p>\r\n        <p><strong>Email: </strong>{person.email}</p>\r\n        <p><strong>Bio: </strong>{person.bio}</p>\r\n        <BackButton page=\"/people\" />\r\n        \r\n      </div>\r\n    )\r\n  }\r\n\r\n","D:\\web-dev\\project-2-vishankrug\\src\\components\\Events.js",[],"D:\\web-dev\\project-2-vishankrug\\src\\components\\LandingPage.js",[],"D:\\web-dev\\project-2-vishankrug\\src\\components\\SubmissionPages.js",[],"D:\\web-dev\\project-2-vishankrug\\src\\components\\Forms.js",["52","53"],"import React, {useState} from 'react';\r\nimport {Formik, Form, Field} from 'formik';\r\nimport firebase from 'firebase';\r\n\r\nimport 'firebase/database';\r\nimport 'firebase/auth';\r\nimport {Button} from 'reactstrap';\r\nimport {BackButton} from './Buttons'\r\nimport { faLeaf } from '@fortawesome/free-solid-svg-icons';\r\n//import { DatePicker } from 'react-datepicker';\r\n//import FileUploader from 'react-firebase-file-uploader';\r\n\r\n\r\n\r\nexport function EventsSubmissionForm(){\r\n  \r\n  /* A huge thank you to Tallan Groberg, Code from https://dev.to/itnext/how-to-do-image-upload-with-firebase-in-react-cpj */\r\n\r\n  const allInputs = {imgUrl: \"\"};\r\n  const [imageAsUrl, setImageAsUrl] = useState(allInputs);\r\n  const [imageAsFile, setImageAsFile] = useState('');\r\n\r\n  const initialValues = {\r\n    titlea: '', \r\n    hostedBy: '', \r\n    time:'',\r\n    date: '', \r\n    location: '', \r\n    description: '', \r\n    image: '',\r\n    isInterest: '',\r\n  }\r\n\r\n  const handleImageAsFile = (event) => {\r\n    const img = event.target.files[0];\r\n    setImageAsFile((img))\r\n    \r\n  }\r\n\r\n  const onSubmit = (values) =>{\r\n    let databaseRef = firebase.database().ref('events');\r\n    let uploadTask = firebase.storage().ref(`/image/${imageAsFile.name}`).put(imageAsFile);\r\n   \r\n\r\n    databaseRef.push(\r\n      {\r\n        title: values.title,\r\n        hostedBy: values.hostedBy,\r\n        time: values.time,\r\n        date: values.date,\r\n        location: values.location,\r\n        description: values.description,\r\n        image: imageAsFile.name,\r\n        isInterested: false,\r\n        \r\n      }\r\n    );\r\n\r\n    uploadTask.on(\"state_change\",\r\n    (snapshot) => {\r\n      console.log(snapshot)\r\n    }, (err) => {\r\n      console.log(err)\r\n    }, () => {\r\n      firebase.storage().ref(\"images\").child(imageAsFile.name).getDownloadURL().then(fireBaseUrl => {\r\n        setImageAsUrl(prevObject => ({...prevObject, imgUrl: fireBaseUrl}))\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n\r\n  return(\r\n    <Formik {...{initialValues, onSubmit}}>\r\n      {() => (\r\n        <Form className=\"baseForm\" noValidate>\r\n          \r\n          <label className=\"mt-4\">Title of event</label> <br></br>\r\n          <Field \r\n            type=\"text\"\r\n            id=\"title\"\r\n            name=\"title\"\r\n            /> <br></br>\r\n\r\n          <label className=\"mt-4\">Hosted by</label> <br></br>\r\n          <Field \r\n            type=\"text\"\r\n            id=\"hostedBy\"\r\n            name=\"hostedBy\"\r\n            /> <br></br>\r\n\r\n          <label className=\"mt-4\">Date</label> <br></br>\r\n          <Field\r\n            type=\"date\"\r\n            id=\"date\"\r\n            name=\"date\"\r\n            /> <br></br>\r\n\r\n          <label className=\"mt-4\">Time</label> <br></br>\r\n          <Field \r\n            type=\"time\"\r\n            id=\"time\"\r\n            name=\"time\"\r\n            /> <br></br>\r\n\r\n          <label className=\"mt-4\">Location</label> <br></br>\r\n          <Field \r\n            type=\"text\"\r\n            id=\"location\"\r\n            name=\"location\"\r\n            /> <br></br>\r\n\r\n          <label className=\"mt-4\">Description</label> <br></br>\r\n          <Field \r\n            type=\"textarea\"\r\n            id=\"description\"\r\n            name=\"description\"\r\n            /> <br></br>\r\n\r\n          <label className=\"mt-4\">Upload an image</label> <br></br>\r\n          <input type=\"file\" id=\"image\" name=\"image\" onChange={handleImageAsFile}/><br></br>\r\n         \r\n          \r\n          <Button type=\"submit\" className=\"mt-5\">Submit</Button>\r\n\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\n\r\nexport function PeopleForm(){\r\n  let user = firebase.auth().currentUser;\r\n  //let peopleRef = firebase.database.ref(\"people\");\r\n  const initialValues = {\r\n    name: user.displayName, \r\n    major: \"\",\r\n    interest: \"\",\r\n    year: \"\",\r\n    email: user.emailVerified,\r\n    bio: \"\"\r\n  }\r\n\r\n  const handleSubmit = (values) => {\r\n    let databasePeopleRef = firebase.database().ref('people');\r\n    databasePeopleRef.set(\r\n      {\r\n        name: values.name,\r\n        major: values.major,\r\n        interest: values.interest,\r\n        year: values.year,\r\n        bio: values.bio,\r\n\r\n      }\r\n    );\r\n  }  \r\n\r\n\r\n  return(\r\n    <Formik {...{initialValues, handleSubmit}}>\r\n    {() => (\r\n      <Form className=\"baseForm\" noValidate>\r\n        \r\n        <label className=\"mt-4\">Name</label> <br></br>\r\n        <Field \r\n          type=\"text\"\r\n          id=\"title\"\r\n          name=\"title\"\r\n          /> <br></br>\r\n\r\n        <label className=\"mt-4\">Major</label> <br></br>\r\n        <Field \r\n          type=\"text\"\r\n          id=\"hostedBy\"\r\n          name=\"hostedBy\"\r\n          /> <br></br>\r\n\r\n        <label className=\"mt-4\">Year</label> <br></br>\r\n        <Field\r\n          type=\"text\"\r\n          id=\"date\"\r\n          name=\"date\"\r\n          /> <br></br>\r\n\r\n        <label className=\"mt-4\">Interest</label> <br></br>\r\n        <Field \r\n          type=\"text\"\r\n          id=\"time\"\r\n          name=\"time\"\r\n          /> <br></br>\r\n\r\n        <label className=\"mt-4\">Bio</label> <br></br>\r\n        <textarea\r\n          id=\"location\"\r\n          name=\"location\"\r\n          rows=\"4\"\r\n          cols=\"50\"\r\n          /> <br></br>\r\n\r\n        <Button type=\"submit\">Submit</Button>\r\n        <BackButton/>\r\n      </Form>\r\n    )}\r\n  </Formik>\r\n  )\r\n}",["54","55"],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":37,"column":10,"nodeType":"62","messageId":"63","endLine":37,"endColumn":19},{"ruleId":"60","severity":1,"message":"64","line":68,"column":11,"nodeType":"62","messageId":"63","endLine":68,"endColumn":20},{"ruleId":"60","severity":1,"message":"65","line":77,"column":11,"nodeType":"62","messageId":"63","endLine":77,"endColumn":20},{"ruleId":"60","severity":1,"message":"66","line":9,"column":10,"nodeType":"62","messageId":"63","endLine":9,"endColumn":16},{"ruleId":"60","severity":1,"message":"67","line":20,"column":10,"nodeType":"62","messageId":"63","endLine":20,"endColumn":20},{"ruleId":"56","replacedBy":"68"},{"ruleId":"58","replacedBy":"69"},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'isLoading' is assigned a value but never used.","Identifier","unusedVar","'newPerson' is assigned a value but never used.","'peopleRef' is assigned a value but never used.","'faLeaf' is defined but never used.","'imageAsUrl' is assigned a value but never used.",["70"],["71"],"no-global-assign","no-unsafe-negation"]
>>>>>>> dff1581f51453589ca89ed90238d052d02a2506f
